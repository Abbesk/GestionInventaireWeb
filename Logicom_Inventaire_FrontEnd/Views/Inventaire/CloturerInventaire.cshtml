@model Logicom_Inventaire_FrontEnd.Models.Inventaire
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "ClôturerInvN°" + Model.numinv;
}

<head>
    <meta name="viewport" content="width=device-width" />
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

    <title>Clôturer Inv N°@Model.numinv</title>
    <style>

        #scrollToTopButton {
            position: fixed;
            right: 0;
            top: 45%;
            transform: translate(0, -50%);
            z-index: 9999;
        }

        #scrollToBottomButton {
            position: fixed;
            right: 0px;
            top: 55%;
            transform: translate(0, -50%);
            z-index: 9999;
        }

        html, body {
            height: 100%;
        }

        body {
            margin-top: 10px;
            background-image: linear-gradient( #d4dcdc, #dfe4e6, #eaedef, #f5f6f7, #ffffff);
            background-repeat: no-repeat;
            background-size: cover;
        }

        .tableDonnes {
            width: 100%;
        }

            .tableDonnes th, .tableDonnes td {
                padding: 5px;
            }

        hr {
            border: 1px solid #000;
        }

        .input-bordered {
            border-top-width: 1px;
            border-right-width: 1px;
            border-bottom-width: 1px;
            border-left-width: 1px;
            border-top-style: solid;
            border-right-style: solid;
            border-bottom-style: solid;
            border-left-style: solid;
            border-top-color: rgb(4, 0, 253);
            border-right-color: rgb(4, 0, 253);
            border-bottom-color: rgb(4, 0, 253);
            border-left-color: rgb(4, 0, 253);
            border-image-source: initial;
            border-image-slice: initial;
            border-image-width: initial;
            border-image-outset: initial;
            border-image-repeat: initial;
        }
        .border-red {
            border-color: red;
            border-width: 2px;
        }

        .border-green {
            border-color: green;
            border-width: 2px;
        }
        .leni {
            color: red;
        }
    </style>
</head>

<center>
    <h2>Clôture de l'inventaire N°@Model.numinv</h2>
</center>
<button id="scrollToBottomButton"> <i class="fa fa-chevron-down"></i> </button>
<button id="scrollToTopButton" onclick="scrollToTop()"> <i class="fa fa-chevron-up"></i> </button>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.numinv)
    @Html.HiddenFor(model => model.cloture)
    @Html.HiddenFor(model => model.Depot.Code)
    @Html.HiddenFor(model => model.Depot.Libelle)
    @Html.HiddenFor(model => model.PointVente.Code)
    @Html.HiddenFor(model => model.PointVente.Libelle)
    @Html.HiddenFor(model => model.codepv)
    @Html.HiddenFor(model => model.libpv)
    @Html.HiddenFor(model => model.codedep)
    @Html.HiddenFor(model => model.libdep)
    @Html.HiddenFor(model => model.Depot.Adresse)
    @Html.HiddenFor(model => model.Depot.Responsable)
    @Html.HiddenFor(model => model.Depot.Datec)
    @Html.HiddenFor(model => model.Depot.TEL)
    @Html.HiddenFor(model => model.Depot.FAX)
    @Html.HiddenFor(model => model.Depot.EMAIL)
    @Html.HiddenFor(model => model.Depot.TYPED)
    @Html.HiddenFor(model => model.Depot.libpv)
    @Html.HiddenFor(model => model.Depot.inactif)
    @Html.HiddenFor(model => model.Depot.sel)
    @Html.HiddenFor(model => model.Depot.SAISIQTENEG)
    <table class="table">
        <tr>
            <th>
                N° Inventaire
            </th>
            <th>
                Date de l'inventaire
            </th>
            <th>
                Code point de vente
            </th>
            <th>
                Libellé point de vente
            </th>
            <th>
                Code dépôt
            </th>
            <th>
                Libellé dépôt
            </th>


        </tr>

        <tr>
            <td>
                @Html.EditorFor(model => model.numinv, new { htmlAttributes = new { @class = "form-control input-bordered", @readonly = "readonly" } })
            </td>
            <td>
                @Html.EditorFor(model => model.dateinv, new { htmlAttributes = new { @class = "form-control input-bordered", @readonly = "readonly" } })
            </td>
            <td>
                @Html.EditorFor(model => model.Depot.Code, new { htmlAttributes = new { @class = "form-control input-bordered", @readonly = "readonly" } })
            </td>
            <td>
                @Html.EditorFor(model => model.Depot.Libelle, new { htmlAttributes = new { @class = "form-control input-bordered", @readonly = "readonly" } })
            </td>
            <td>
                @Html.EditorFor(model => model.PointVente.Code, new { htmlAttributes = new { @class = "form-control input-bordered", @readonly = "readonly" } })
            </td>
            <td>
                @Html.EditorFor(model => model.PointVente.Libelle, new { htmlAttributes = new { @class = "form-control input-bordered", @readonly = "readonly" } })
            </td>
        </tr>

    </table>
    <hr />


    <table class="tableDonnes">
        <tr>
            <th>
                <label>Filtrage:</label>
            </th>
        </tr>
        <tr>
            <td>
                <label for="selection_globale">Globale</label>
            </td>
            <td>
                <input type="radio" class="form-check-input" id="selectionglobale" name="selection" value="Globale" onclick="Disable()" checked="checked">
            </td>

            <td>
                <input class="form-control" type="text" id="TriDes" disabled="disabled" minlength="4" maxlength="8" size="10">
            </td>
            <td>
                <input class="form-control" type="text" id="des" name="designation" disabled="disabled" size="10" onkeyup="filtrer()">
            </td>
        </tr>
        <tr>
            <th>
                <label for="selection_famille">Par famille</label>
            </th>
            <td>
                <input type="radio" class="form-check-input" id="btn_selection_famille" name="selection" value="Famille" onclick="EnableByFamille()">
            </td>
            <td></td>

        </tr>
        <tr>
            <th>
                <label for="selection_fournisseur">Par fournisseur</label>
            </th>
            <td>
                <input type="radio" class="form-check-input" id="btn_selection_fournisseur" name="selection" value="Fournisseur" onclick="EnableByFournisseur()">
            </td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td>
                <strong>Code article</strong>
            </td>
            <td>
                <input class="form-control" type="text" id="codeart" name="codeart" size="10" onkeyup="filtrercodeart()">
            </td>

            <td>
                <strong>Désignation article</strong>
            </td>
            <td>
                <input class="form-control" type="text" id="desart" name="desart" size="10" onkeyup="filtrerdesart()">
            </td>
        </tr>
    </table>
    <hr />
    <table class="tableDonnes">
        <tr>
            <td>
                <strong>Nombre total d'articles</strong>
            </td>
            <td>
                <input class="form-control" id="nbTotalArticles" size="5" style="width: 100px; text-align: center;" value="@Model.Depot.LignesDepot.Count()" disabled>
            </td>
            <td>
                <button id="scrollToBottomButton">
                    <i class="fa fa-chevron-down"></i>
                </button>
            </td>

        </tr>
    </table>
    <br />
    <hr />
    <table id="ExpTable" class="table">
        <thead>
            <tr>
                <th>
                    Nom de famille
                </th>
                <th>
                    Code article
                </th>
                <th>
                    Désignation
                </th>
                <th>
                    Quantité informatisée
                </th>
                <th>
                    Quantité physique
                </th>
                <th>
                    Justification
                </th>
                <th>
                    Libellé du fournisseur
                </th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Depot.TMPLignesDepot.Count; i++)
            {
                var ecartinv = Model.Depot.TMPLignesDepot[i].qteart - Model.Depot.TMPLignesDepot[i].qteInventaire;
                var borderClass = ecartinv != 0 ? "border-red" : "border-green";
            <tr>
                <td>
                    @Html.EditorFor(m => m.Depot.TMPLignesDepot[i].famille, new { htmlAttributes = new { @class = $"form-control {borderClass}", @readonly = "readonly" } })
                </td>
                <td>
                    @Html.EditorFor(m => m.Depot.TMPLignesDepot[i].codeart, new { HtmlAttributes = new { @class = $"form-control {borderClass}", @readonly = "readonly" } })
                </td>
                <td>
                    @Html.EditorFor(m => m.Depot.TMPLignesDepot[i].desart, new { HtmlAttributes = new { @class = $"form-control {borderClass}", @readonly = "readonly" } })
                </td>
                <td>
                    @Html.EditorFor(m => m.Depot.TMPLignesDepot[i].qteart, new { HtmlAttributes = new { @class = $"form-control {borderClass}", @readonly = "readonly" } })
                </td>
                <td>
                    @Html.EditorFor(m => m.Depot.TMPLignesDepot[i].qteInventaire, new { HtmlAttributes = new { @class = $"form-control {borderClass}", @readonly = "readonly" } })
                </td>
                <td>
                    @Html.EditorFor(m => m.Depot.TMPLignesDepot[i].commentaire, new { HtmlAttributes = new { @class = $"form-control {borderClass}", @readonly = "readonly" } })
                </td>
                <td>
                    @Html.EditorFor(m => m.Depot.TMPLignesDepot[i].libellefourn, new { HtmlAttributes = new { @class = $"form-control {borderClass}", @readonly = "readonly" } })
                </td>
                <td>
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].commentaire)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].famille)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].codeart)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].desart)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].qteart)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].lieustock)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].Datderninv)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].codesel)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].saisie)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].LibUtil)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].fourn)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].libellefourn)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].numordre)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].codedep)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].libelle)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].nordre)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].dateexp)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].numinv)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].puht)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].isSelected)
                    @Html.HiddenFor(m => m.Depot.TMPLignesDepot[i].codepv)
            </tr>
                }
            </tbody>
    </table>
    <div style="display: flex; justify-content: center; align-items: center;">
        <input type="submit" style="margin: 5px;" value="Clôturer l'inventaire" class="btn btn-default" />
        
    </div>
}
@section Scripts {
    <script type="text/javascript">
        $(".custom-file-input").on("change", function () {
            var fileName = $(this).val().split("\\").pop();
            $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
        });
        
        function scrollToTop() {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
        $(function () {
            $('#scrollToBottomButton').click(function () {
                $('html, body').animate({ scrollTop: $(document).height() }, 'slow');
                return false;
            });
        });
        function filtrercodeart() {
            var filtre, tableau, ligne, cellule, i, texte
            filtre = document.getElementById("codeart").value.toUpperCase();
            tableau = document.getElementById("ExpTable");
            ligne = tableau.getElementsByTagName("tr");
            for (i = 0; i < ligne.length; i++) {

                cellule = ligne[i].getElementsByTagName("td")[1];
                if (cellule) {
                    texte = cellule.innerHTML;
                    if (texte.indexOf(filtre) > -1) {
                        ligne[i].style.display = "";
                    }
                    else {
                        ligne[i].style.display = "none";
                    }
                }
            }
        }
        function filtrerdesart() {
            var filtre, tableau, ligne, cellule, i, texte
            filtre = document.getElementById("desart").value.toUpperCase();
            tableau = document.getElementById("ExpTable");
            ligne = tableau.getElementsByTagName("tr");
            for (i = 0; i < ligne.length; i++) {

                cellule = ligne[i].getElementsByTagName("td")[2];
                if (cellule) {
                    texte = cellule.innerHTML;
                    if (texte.indexOf(filtre) > -1) {
                        ligne[i].style.display = "";
                    }
                    else {
                        ligne[i].style.display = "none";
                    }
                }
            }
        }
        function Compter() {
            var tableau, ligne
            filtre = document.getElementById("desart").value.toUpperCase();
            tableau = document.getElementById("ExpTable");
            ligne = tableau.getElementsByTagName("tr");
            document.getElementById("nbrlignes").value = ligne.length
        }
        function Disable() {
            document.getElementById("des").disabled = true;
            document.getElementById("des").value = "";
            document.getElementById("TriDes").value = "";
        }
        function EnableByFamille() {
            document.getElementById("des").disabled = false;
            document.getElementById("TriDes").value = "Famille";
        }
        function EnableByFournisseur() {
            document.getElementById("des").disabled = false;
            document.getElementById("TriDes").value = "Fournisseur";
        }
        function filtrer() {
            var filtre, tableau, ligne, cellule, i, texte, j
            filtre = document.getElementById("des").value.toUpperCase();
            tableau = document.getElementById("ExpTable");
            ligne = tableau.getElementsByTagName("tr");
            for (i = 0; i < ligne.length; i++) {
                if (document.getElementById("btn_selection_fournisseur").checked == true) {

                    j = 4;
                }
                if (document.getElementById("btn_selection_famille").checked == true) {

                    j = 0;
                }
                cellule = ligne[i].getElementsByTagName("td")[j];
                if (cellule) {
                    texte = cellule.innerHTML;
                    if (texte.indexOf(filtre) > -1) {
                        ligne[i].style.display = "";
                    }
                    else {
                        ligne[i].style.display = "none";
                    }
                }
            }
        }

    </script>
}

